/*最小生成树
    Prim：     录入点集  选出最短点   一个最短点数组d[]结构体    放着序号  和   权值
    Kruskal:   边集结构体   求入度函数    入度排序函数    并查集函数 判断环     
   拓扑排序：
     添加队列   
     将入度为0的顶点入队
   最小路径：
     迪杰斯特拉：  P[] D[]  final[]
     弗洛伊德：   P[][][]  D[][]
   查找：直接查找
   排序：快速排序
   存储结构：以有向网为主
   在计算最小生成树的时候  另设矩阵补全为无向网     
*/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define max 65535
#define maxsize 30
#define maxnode 100
#define maxfile 100
typedef struct GraphMatrix
{
    int vexnum,arcnum;
    char name[maxnode + 1][maxsize];
    int node[maxnode + 1][maxnode + 1];
}GM;
typedef struct edge
{
    int begin, end, weight;
}edge;
typedef struct Qnode
{
    int num;
    Qnode* next;
}Qnode;
typedef struct queue
{
    Qnode* front, * rear;
}queue,*Queue;
typedef struct Node
{
    int num;
    int weight;
}Node;
int filechoose = 1, cusfile;      
char Filename[maxfile][30];   //文件名数组  = {{""},{"ONE.txt"},{"TWO.txt"},{"THREE.txt"},{"FOUR.txt"}};
/*─│┌ ┐└ ┘├ ┤┬ ┴ ┼*/

void menu()
{
    printf("\n%67s\n", "通信网络架设咨询");
    printf("%100s", "┌─────────────────────────┐\n");
    printf("%75s", "│       1.最小生成树      │\n");
    printf("%100s", "├─────────────────────────┤\n");
    printf("%75s", "│       2.拓扑排序        │\n"); 
    printf("%100s", "├─────────────────────────┤\n");
    printf("%75s", "│       3.最短路径        │\n"); 
    printf("%100s", "├─────────────────────────┤\n");
    printf("%75s", "│       4.更换数据        │\n"); 
    printf("%100s", "├─────────────────────────┤\n");
    printf("%75s", "│       5.新建数据        │\n"); 
    printf("%100s", "├─────────────────────────┤\n");
    printf("%75s", "│       6.预览数据        │\n"); 
    printf("%100s", "├─────────────────────────┤\n");
    printf("%75s", "│       0.退出            │\n"); 
    printf("%100s", "└─────────────────────────┘\n");
}

int Check(char name[30])   //查找重复文件名
{
    int i;
    strcpy(Filename[0], name);
    for (i = cusfile;strcmp(Filename[i], name);i--);
    return i;
}

void SaveFileName()  //存储地图名函数
{
    FILE* fp;
    int i;
    fp = fopen("TestDataName.txt", "w+");
    fprintf(fp, "%d\n", cusfile);
    for (i = 1;i <= cusfile;i++)
        fprintf(fp, "%s\n", Filename[i]);
    fclose(fp);
}

void ReadFileName()  //读取地图名函数
{
    FILE* fp;
    int i;
    fp = fopen("TestDataName.txt", "r+");
    fscanf(fp, "%d\n", &cusfile);
    for (i = 1;i <= cusfile;i++)
        fscanf(fp, "%s\n", Filename[i]);
    fclose(fp);
}

void read(GM* G)   //读取数据函数
{
    FILE* fp;
    int i, j;
    fp = fopen(Filename[filechoose], "r");
    fscanf(fp, "%d\t%d\t\n",&G->vexnum, &G->arcnum);
    for (i = 1;i <= G->vexnum;i++)
    {
        fscanf(fp, "%30s", G->name[i]);
        if (i % 5 == 0)
            fscanf(fp,"\n");
    }
    fscanf(fp,"\n");
    for (i = 1;i <= G->vexnum;i++)
    {
        for (j = 1;j <= G->vexnum;j++)
            fscanf(fp, "%10d", &G->node[i][j]);
        fscanf(fp, "\n");
    }
    fclose(fp);
}

void save(GM* G)   //存储函数
{
    FILE* fp;
    int i, j;
    char name[30];
    printf("输入数据名(1-10个字)：");
N:  scanf_s("%s", name, 30);
    if (strlen(name) > 20)
    {
        printf("\033[31m地图名过长，请重新输入\033[0m：");
        goto N;
    }
    strcat(name, ".txt");
    if (Check(name))
    {
        printf("\033[31m地图名已存在,请重新输入\033[0m：");
        goto N;
    }
    strcpy(Filename[++cusfile], name);
    fp = fopen(Filename[cusfile], "w+");
    fprintf(fp,"%d\t%d\t\n",G->vexnum,G->arcnum);
    for (i = 1;i <= G->vexnum;i++)
    {
        fprintf(fp, "%30s", G->name[i]);
        if (i % 5 == 0)
            fprintf(fp, "%c", '\n');
    }
    fprintf(fp, "%c", '\n');
    for (i = 1;i <= G->vexnum;i++)
    {
        for (j = 1;j <= G->vexnum;j++)
            fprintf(fp, "%10d", G->node[i][j]);
        fprintf(fp, "%c", '\n');
    }
    fclose(fp);
}

int Locate(char v[maxsize], GM* G)  //直接查找函数
{
    int i;
    for (i = 1;i <= G->vexnum;i++)
        if (!strcmp(v, G->name[i]))
            return i;
    return 0;
}

void creat(GM* G)   //有向网创建函数
{
    int i, j, w;
    char v1[maxsize], v2[maxsize];
xx: printf("%63s","顶点个数：");
    scanf_s("%d", &G->vexnum);
    printf("\n%63s\n","输入顶点名");
    for (G->arcnum = 0, i = 1;i <= G->vexnum;i++)
    {
        printf("%53s%d."," ",i);
        scanf_s("%s", G->name[i], maxsize);
        for (j = 1;j <= G->vexnum;j++)
            G->node[i][j] =max;
    }
    printf("\n%63s\n\n","*创建关系*");
    printf("%71s\n%47s","出发点    目标点    距离", " ");
    scanf_s("%s%s%d", v1, maxsize, v2, maxsize, &w);
    while (v1[0] != '#')
    {
        i = Locate(v1, G);
        j = Locate(v2, G);
        if (!(i && j))
        {
            printf("\n");
            printf("\n%74s\n", "查找不到输入的数据,请重新输入");
            system("pause");
            system("cls");
            goto xx;
        }
        G->node[i][j] = w;
        G->arcnum++;
        printf("%47s", " ");
        scanf_s("%s%s%d", v1, maxsize, v2, maxsize, &w);
    }
    printf("\n%65s\n\n","测试数据创建完毕");
    printf("%80s","是否将新建数据存储进测试数据库中？(1.是/0.否)：");
    do {
        scanf("%d", &i);
        switch (i)
        {
        case 0:
            printf("\n%63s\n\n","创建完毕");
            system("pause");
            return;
        case 1:save(G);return;
        default:
            printf("%70s","输入选项不存在,请重新输入:");
            break;
        }
    } while (i == 0 || i == 1);
}

int Mini(Node node[maxnode + 1],GM*G)  //查找最小值函数
{
    int i, mini=max, k=max;
    for(i=1;i<=G->vexnum;i++)
        if (node[i].weight && node[i].weight < mini)
        {
            k = i;
            mini = node[i].weight;
        }
    return k;
}

void MiniTree_Prim(GM* G)   //普里姆最小生成树
{
    Node node[maxnode + 1];
    int i,j,v0=1;
    printf("%100s", "┌─────────────────────────┐\n");
    for (i = 1;i <= G->vexnum;i++)
        if (i != v0)
        {
            node[i].num = v0;
            node[i].weight = G->node[v0][i];
        }
    node[v0].weight = 0;
    for (i = 2;i <= G->vexnum;i++)
    {
        v0 = Mini(node,G);
        printf("%47s%10s%10s%7s\n","│",G->name[node[v0].num], G->name[v0],"│");   //将查找到的最小值输出
        if (i == G->vexnum)
            printf("%100s", "└─────────────────────────┘\n");
        else
            printf("%100s", "├─────────────────────────┤\n");
        node[v0].weight = 0;
        for(j=1;j<=G->vexnum;j++)
            if (G->node[v0][j] < node[j].weight)
            {
                node[j].weight = G->node[v0][j];
                node[j].num = v0;
            }
    }
}

void Sort(edge edgenode[maxnode+1],GM*G)  //选择排序函数
{
    int i,j,k;
    edge temp;
    for (i = 1;i < G->arcnum;i++)
    {
        k = i;
        for (j = i + 1;j <= G->arcnum;j++)
            if (edgenode[k].weight > edgenode[j].weight)
                k = j;
        if (k != i)
        {
            temp = edgenode[i];
            edgenode[i] = edgenode[k];
            edgenode[k] = temp;
        }
    }
}

void edgecreat(GM* G,edge edgenode[maxnode+1])  //求入度  统计边集函数
{
    int i,j,k=1;
    G->arcnum = 0;
    for (i = 1;i <= G->vexnum;i++)
        for (j = 1;j <= G->vexnum;j++)
            if (i<j&&G->node[i][j] < max)
            {
                G->arcnum++;
                edgenode[k].begin = i;
                edgenode[k].end = j;
                edgenode[k++].weight = G->node[i][j];
            }
    Sort(edgenode,G);
}

int Find(int parent[maxnode+1],int n)  //并查函数
{
    while (parent[n])
        n = parent[n];
    return n;
}

void MiniTree_Kruskal(GM* G)  //克鲁斯卡尔最小生成树
{
    edge edgenode[maxnode+1];
    int parent[maxnode+1];
    int i, m, n,count=0;
    printf("%100s", "┌─────────────────────────┐\n");
    edgecreat(G, edgenode);
    for (i = 1;i <= G->vexnum;i++)
        parent[i] = 0;
    for (i = 1;i <= G->arcnum;i++)
    {
        m = Find(parent, edgenode[i].begin);
        n = Find(parent, edgenode[i].end);
        if (m != n)
        {
            parent[m] = n;
            printf("%47s%10s%10s%7s\n","│", G->name[edgenode[i].begin], G->name[edgenode[i].end],"│");
            if(++count==G->vexnum-1)
                printf("%100s", "└─────────────────────────┘\n");
            else
                printf("%100s", "├─────────────────────────┤\n");
        }
    }
}

void Initial(Queue &Q)  //队列初始化函数
{
    Q->front = Q->rear = (Qnode*)malloc(sizeof(Qnode));
    Q->front->next = NULL;
}

void InQueue(Queue &Q, int num)  //入队函数
{
    Qnode* p;
    p = (Qnode*)malloc(sizeof(Qnode));
    p->num = num;
    p->next = NULL;
    Q->rear->next = p;
    Q->rear = p;
}

int OutQueue(Queue &Q)  //出队函数
{
    Qnode* p;
    int num;
    p = Q->front->next;
    Q->front->next = p->next;
    if (p == Q->rear) Q->rear = Q->front;
    num = p->num;
    free(p);
    return num;
}

int EmptyQueue(Queue Q)  //判断对空函数
{
    if (Q->rear == Q->front)
        return 1;
    return 0;
}

void Indegree(int indegree[maxnode+1], GM* G)   //统计入度函数
{
    int i, j;
    for (i = 1;i <= G->vexnum;i++)
        indegree[i] = 0;
    for (i = 1;i <= G->vexnum;i++)
        for (j = 1;j <= G->vexnum;j++)
            if (G->node[i][j] < max)
                indegree[j]++;
}

void TopuSort(GM* G)  //拓扑排序函数
{
    Queue Q;
    int indegree[maxnode + 1];
    int i, j, v, count = 0;
    printf("\n%64s\n","* 拓扑排序 *");
    Q = (Queue)malloc(sizeof(queue));
    Indegree(indegree, G);
    Initial(Q);
    for (i = 1;i <= G->vexnum;i++)
        if (!indegree[i])
            InQueue(Q, i);
    if (EmptyQueue(Q))
    {
        printf("\n%68s\n","不存在入度为0的结点");
        system("pause");
        return;
    }
    while (!EmptyQueue(Q))
    {
        v = OutQueue(Q);
        if (count % 5 == 0)
            printf("\n\n%32s", " ");
        printf("%10s", G->name[v]);
        count++;
        for (i = 1;i <= G->vexnum;i++)
            if (G->node[v][i] < max)
                if (!--indegree[i])
                    InQueue(Q, i);
    }
    putchar('\n');
    system("pause");
}

void ShortestPath_Dijstra(GM* G,int v0,int ve)  //迪杰斯特拉最短路径
{
    int P[maxnode + 1][maxnode + 1];
    int D[maxnode + 1], final[maxnode + 1];
    int i, j, w,mini;
    for (i = 1;i <= G->vexnum;i++)
    {
        P[i][0] = 1;
        P[i][1] = v0;
        D[i] = G->node[v0][i];
        final[i] = 0;
        for (j = 2;j <= G->vexnum;j++)
            P[i][j] = 0;
        if (D[i] < max)
        {
            P[i][2] = i;
            P[i][0]++;
        }
    }
    D[v0] = 0;
    final[v0] = 1;
    for (i = 1;i <= ve;i++)
    {
        mini = max;
        for(j=1;j<=G->vexnum;j++)
            if (!final[j] && D[j] < mini)
            {
                mini = D[j];
                v0 = j;
            }
        final[v0] = 1;
        for(j=1;j<=G->vexnum;j++)
            if (!final[j] && (mini + G->node[v0][j]) < D[j])
            {
                D[j] = mini + G->node[v0][j];
                for (w = 0;w <= P[v0][0];w++)
                    P[j][w] = P[v0][w];
                P[j][++P[j][0]] = j;
            }
    }
    if (D[ve] < max)
    {
        printf("\n%65s\n","* 最短路径 *");
        printf("%100s", "┌─────────────────────────┐\n");
        for (i = 1;i <= P[ve][0]-1;i++)
        {
            printf("%47s%10s%10s%7s\n","│", G->name[P[ve][i]], G->name[P[ve][i+1]],"│");
            printf("%100s", "├─────────────────────────┤\n");
        }
        printf("%47s%14s%5d%8s\n", "│","路长：",D[ve], "│");
        printf("%100s", "└─────────────────────────┘\n");
    }
    else
        printf("\n%70s\n","两个地点间不存在路径");
}

int Check_node(GM* G) //判断是否存在孤立点函数
{
    int i, j, num;
    int indegree[maxnode+1];
    Indegree(indegree,G);
    for (i = 1;i <= G->vexnum;i++)
    {
        num = 0;
        for (j = 1;j <= G->vexnum;j++)
            if (G->node[i][j]< max)
                num++;
        if ((num == 0) && (indegree[i] == 0))
            return 1;
    }
    return 0;
}

void Turn(GM* G, GM* g)
{
    int i, j;
    g->vexnum = G->vexnum;
    g->arcnum = G->arcnum;
    for (i = 1;i <= g->vexnum;i++)
    {
        strcpy_s(g->name[i], G->name[i]);
        for (j = 1;j <= g->vexnum;j++)
            g->node[i][j] = max;
    }
    for (i = 1;i <= g->vexnum;i++)
        for (j = 1;j <= g->vexnum;j++)
            if (G->node[i][j] < max)
                g->node[i][j] = g->node[j][i] = G->node[i][j];
}

void MiniTree(GM* G)  //最小生成树调用函数
{
    GM* g;
    if (!G->arcnum)
    {
        printf("\n%65s\n", "空图无法输出");
        system("pause");
        return;
    }
    g = (GM*)malloc(sizeof(GM));
    Turn(G, g);
    if (Check_node(G))
    {
        printf("\n%73s\n", "该图不连通，无法生成最小生成树");
        system("pause");
        return;
    }
    printf("\n%65s\n","* Prim算法 *");
    MiniTree_Prim(g);
    printf("\n%67s\n","* Kruskal算法 *");
    MiniTree_Kruskal(g);
    system("pause");
}

void ShortestPath(GM* G)  //最小路径调用函数
{
    char v1[maxsize], v2[maxsize];
    int i, j;
    printf("\n%64s\n\n", "求最短路径");
nn: printf("%60s","起点：");
    scanf_s("%s", v1,maxsize);
    printf("\n%60s", "终点：");
    scanf_s("%s", v2, maxsize);
    i = Locate(v1, G);
    j = Locate(v2, G);
    if (!(i && j))
    {
        printf("\n%74s\n","查找不到输入的数据,请重新输入");
        system("pause");
        system("cls");
        goto nn;
    }
    ShortestPath_Dijstra(G,i,j);
    system("pause");
}

void Choose(GM* G)
{
    int i;
    printf("\n%66s\n\n","退出选择请输入0");
    printf("%104s", "┌────────────────────────────┐\n");
    for (i = 1;i <= cusfile;i++)
    {
        printf("%45s%3d.%22s%4s\n", "│", i, Filename[i], "│");
        if (i == cusfile)
            printf("%104s", "└────────────────────────────┘\n");
        else
            printf("%104s", "├────────────────────────────┤\n");
    }
    printf("\n%66s","选择测试数据号：");
F:	scanf("%d", &filechoose);
    if (filechoose == 0)
    {
        filechoose = max;
        return;
    }
    if (filechoose<1 || filechoose>cusfile)
    {
        printf("\n输入测试数据号不存在，请重新选择:");
        goto F;
    }
    read(G);
    printf("%63s\n","选择成功!");
    system("pause");
}

void row(GM* G)
{
    int i;
    for (i = 0;i <= G->vexnum;i++)
    {
        printf("────────");  //5word
        if (i != G->vexnum)
            printf("┼");
        else
            printf("┤");
    }
}

void View(GM* G)  //预览数据函数
{
    int i, j;
    system("cls");
    printf("┌");
    for (i = 0;i <= G->vexnum;i++)
    {
        printf("────────");  //5word
        if (i != G->vexnum)
            printf("┬");
        else
            printf("┐");
    }
    printf("\n│        │");
    for (i = 1;i <= G->vexnum;i++)
        printf("%8s│", G->name[i]);
    for (i = 1;i <= G->vexnum;i++)
    {
        printf("\n├");
        row(G);
        printf("\n│%8s│", G->name[i]);
        for (j = 1;j <= G->vexnum;j++)
            if (G->node[i][j] == max)
                printf("   /    │");
            else
                printf("%8d│", G->node[i][j]);
    }
    printf("\n└");
    for (i = 0;i <= G->vexnum;i++)
    {
        printf("────────");  //5word
        if (i != G->vexnum)
            printf("┴");
        else
            printf("┘\n");
    }
    system("pause");
}

int main()
{
    int choose;
    GM* G;
    G = (GM*)malloc(sizeof(GM));
    ReadFileName();
    read(G);
    while (1)
    {
        system("cls");
        menu();
        printf("\n%63s","输入功能：");
        scanf_s("%d", &choose);
        printf("%73s\n","——————————————");
        switch (choose)
        {
        case 0://退出
            printf("\n%73s\n","**********感谢使用**********");
            SaveFileName();
            return 0;
        case 1://最小生成树
            MiniTree(G);
            break;
        case 2://拓扑排序
            TopuSort(G);
            break;
        case 3://最小路径
            ShortestPath(G);
            break;
        case 4://选择测试数据
            Choose(G);
            break;
        case 5://新建测试数据
            creat(G);
            break;
        case 6: //预览数据
            View(G);
            break;
        default:
            printf("Erro Data\n");
            exit(0);
        }
    }
}
